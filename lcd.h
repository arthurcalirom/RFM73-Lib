/*
 * lcd.h
 *
 * Created: 24.06.2013 19:25:16
 *  Author: d-wsky
 */ 

/*******************************************************************************************
**                                                                                        **
**  Модуль работы с ЖКИ контроллером HD44780 или аналогичными.                            **
**                                                                                        **
********************************************************************************************

   Описание функций:
   
   1. Высокоуровневые:    
   
     * void lcd_init(void) 
         Подготовка ЖКИ к работе. По умолчанию инициализирует
         ЖКИ в работу в 4-битном режиме, с двумя строками и
         матрицей символов 5х7. Другой режим можно задать с помощью
         функции lcd_cmd согласно таблицы прил. 1.
     
     * void lcd_cmd(char cmd) 
         Запись команды в контроллер ЖКИ. Байт команды указывается
         параметром cmd (см. таблицу прил. 1 в конце описания)
     
     * void LCD4_putchar(unsigned char data)
         Запись символа в контроллер ЖКИ.
     
     * void lcd_gotoxy(unsigned char x,unsigned char y)
         Перевод курсора в заданную позицию. х - строка (0 - первая
         строка, 1 - вторая); y - порядковый номер символа в строке
         Счет символов в строке с нуля!
     
     * void lcd_puts(unsigned char*data)
         Вывод на дисплей строки   

     * void lcd_putsf(unsigned flash char*data)
         Вывод на дисплей строки из flash-памяти  
     
     * void lcd_clear(void)
         Очистка дисплея и возврат курсора в начальную позицию.
         Исполнение команды 0x01 согласно прил. 1.
         ! НА ИСПОЛНЕНИЕ КОМАНДЫ КОНТРОЛЛЕРУ ЖКИ ТРЕБУЕТСЯ БОЛЬШОЕ
         ! ВРЕМЯ. ВНУТРИ ВЫДЕРЖКА 1,5 СЕК.
          
     * void lcd_home(void)
         Возврат курсора в начальную позицию без очистки дисплея.
         Исполнение команду 0x02 согласно прил. 1.
         ! НА ИСПОЛНЕНИЕ КОМАНДЫ КОНТРОЛЛЕРУ ЖКИ ТРЕБУЕТСЯ БОЛЬШОЕ
         ! ВРЕМЯ. ВНУТРИ ВЫДЕРЖКА 1,0 СЕК.
         ! ЛУЧШЕ ИСПОЛЬЗОВАТЬ ФУНКЦИЮ lcd_gotoxy(0, 0);
     
   2. Низкоуровневые
     
     * void LCD4_Write_tetrad(unsigned char data) 
         Подпрограмма записи одной из тетрад байта в ЖКИ.
         Производит сдвиг на LCD4_D_PIN_SHIFT всех разрядов
         переменной data, поскольку биты данных могут располагаться
         не сначала порта ввода/вывода. Устанавливает содержимое
         data на порте и дергает ножку LCD4_E_PIN
     
     * void lcd_write_byte(unsigned char c) 
         Подпрограмма записи байта в контроллер ЖКИ.
         Дважды вызывает функцию LCD4_Write_tetrad после того, 
         как разобъет входимый char на две тетрады    
     
   3. Специализированные
     
     * void lcd_set_cgram(char adr, char data)
         Запись в CGRAM байта data по адресу adr. adr=0..3FF, data=0..1F
         Всего можно адресовать 8 символов, которые будут иметь порядковые
         номера 0..7. старшие 3 разряда adr определяют порядковый номер
         символа adr, младшие - порядковый номер строки в символе. Возможен
         только режим 5х7, так что можно нарисовать только символ 5х8,
         поскольку еще 1 строчка есть под курсор.
         Единица в поле data означает, что соответствующий пиксель 
         соответствующей строки соответствующего символа будет гореть.
         Низкоуровневая функция, следует использовать lcd_set_cg_symbol

     * void lcd_set_cg_symbol(char adr, flash char s[8])
         Перезапись символа в CGRAM по адресу adr. 8 раз вызывает функцию
         lcd_set_cgram. Второй аргумент - массив, записываемый в CGRAM,
         хранящийся во flash (при желании можно заменить на eeprom,
         переписав соответствующее поле). 
                                              
********************************************************************************************

ПРИЛОЖЕНИЕ 1. Система команд контроллера HD44780

+-------------------+---+---+---+---+---+---+---+---+---+---+------------------------------+
|    Инструкции     |RS |R/W|DB7|DB6|DB5|DB4|DB3|DB2|DB1|DB0|   Описание                   |     
+-------------------+---+---+---+---+---+---+---+---+---+---+------------------------------+
| Очистить          | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | Очистка дисплея, возврат     |     
| дисплей           |   |   |   |   |   |   |   |   |   |   | курсора в нач. позицию       |     
+-------------------+---+---+---+---+---+---+---+---+---+---+------------------------------+
| Возврат в         | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | Воврат курсора в начальную   |     
| начало            |   |   |   |   |   |   |   |   |   |   | позицию, ОЗУ не изменяется   |     
+-------------------+---+---+---+---+---+---+---+---+---+---+------------------------------+
| Установка         | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |I/D| S | Установка режима дисплея     |     
| режима            |   |   |   |   |   |   |   |   |   |   |                              |     
+-------------------+---+---+---+---+---+---+---+---+---+---+------------------------------+
| Включение/        | 0 | 0 | 0 | 0 | 0 | 0 | 1 | D | C | B | Вкл/выкл: D - дисплея, C -   |     
| выключение дисплея|   |   |   |   |   |   |   |   |   |   | курсора, B - мигания курсора |     
+-------------------+---+---+---+---+---+---+---+---+---+---+------------------------------+
| Сдвиг             | 0 | 0 | 0 | 0 | 0 | 1 |S/C|R/L| 0 | 0 | Перемещение курсора и        |     
| курсора           |   |   |   |   |   |   |   |   |   |   | скроллинг. ОЗУ не меняется   |     
+-------------------+---+---+---+---+---+---+---+---+---+---+------------------------------+
| Установка         | 0 | 0 | 0 | 0 | 1 | DL| N | F | 0 | 0 | Настройка интерфейса         |     
| функций           |   |   |   |   |   |   |   |   |   |   | ввода/вывода                 |     
+-------------------+---+---+---+---+---+---+---+---+---+---+------------------------------+
| Установка         | 0 | 0 | 0 | 1 |         ACG           | Установка CGRAM-адреса,      |     
| CGRAM-адреса      |   |   |   |   |                       | передача или прием данных    |
+-------------------+---+---+---+---+-----------------------+------------------------------+
| Установка         | 0 | 0 | 1 |             ADD           | Установка DDRAM-адреса,      |     
| DDRAM-адреса      |   |   |   |                           | передача или прием данных    |     
+-------------------+---+---+---+---------------------------+------------------------------+
| Чтение адреса и   | 0 | 1 | BF|             AC            | Чтение флага занятости и     |     
| флага занятости   |   |   |   |                           | счетчика адреса              |     
+-------------------+---+---+---+---------------------------+------------------------------+
| Запись            | 1 | 0 |           Байты данных        | Запись в ОЗУ                 |     
| данных            |   |   |                               |                              |     
+-------------------+---+---+-------------------------------+------------------------------+
| Чтение            | 0 | 1 |           Байты данных        | Чтение из ОЗУ                |     
| данных            |   |   |                               |                              |     
+-------------------+---+---+-------------------------------+------------------------------+
|                   | I/D=1 увеличение, I/D=0 уменьшение    |                              |
|                   | адреса курсора при записи нового      |                              |
|                   | символа                               | DDRAM вывод содержимого ОЗУ  |     
|                   | S=1 относительный скролинг            | CGRAM ОЗУ генератора символов|     
|                   | S/C=1 сдвиг рабочей области           | ACG - адрес CGRAM            |     
|                   | S/C=0 сдвиг курсора                   | ADD - адрес DDRAM, адрес     |     
|                   | R/L=1 сдвиг вправо                    |       курсора                |     
|                   | R/L=0 сдвиг влево                     | AC - счетчик адреса,         |     
|                   | DL=1  8 бит, DL=0  4 бита             |      используемых для DDRAM  |     
|                   | N=1   2 строки,  N=0  1 строка        |      и CGRAM                 |     
|                   | F=1 матрица 5х10, F=0 матрица 5х7     |                              |     
|                   | BF=1 работа по внутренним инструкциям |                              |     
|                   | BF=0 прием внешних инструкций         |                              |     
+-------------------+---------------------------------------+------------------------------+     

*******************************************************************************************/

#ifndef LCD_H_
#define LCD_H_


// Настройка портов ввода/вывода
#define LCD4_E_PIN          1      
#define LCD4_RS_PIN         0
#define LCD4_D0_PIN         4
#define LCD4_D1_PIN         5
#define LCD4_D2_PIN         6
#define LCD4_D3_PIN         7

#define LCD4_E_PORT         PORTC
#define LCD4_RS_PORT        PORTC
#define LCD4_D0_PORT        PORTC
#define LCD4_D1_PORT        PORTC
#define LCD4_D2_PORT        PORTC
#define LCD4_D3_PORT        PORTC
#define LCD4_E_PORT_DIR     DDRC
#define LCD4_RS_PORT_DIR    DDRC
#define LCD4_D0_PORT_DIR    DDRC
#define LCD4_D1_PORT_DIR    DDRC
#define LCD4_D2_PORT_DIR    DDRC
#define LCD4_D3_PORT_DIR    DDRC

// различные задержки
#define delay_e_flag        _delay_us(25);
// эти задержки в unids3 не нужны
//#define delay_rs_flag       #asm("nop"); //delay_us(1);
// задержка между установлением данных на порте
// и опусканием флага е
//#define delay_data          #asm("nop"); //delay_us(1);
// задержка между последовательными передачами
//#define delay_byte          #asm("nop"); //delay_us(1);

// текстовые константы выбора режимов работы жки (см. приложение выше)
#define DISP_DISPON_CUROFF_BLINKOFF 0b00001100          
#define DISP_DISPON_CUROFF_BLINKON  0b00001101          
#define DISP_DISPON_CURON_BLINKOFF  0b00001110        
#define DISP_DISPON_CURON_BLINKON   0b00001111 

// выбор направления движения курсора после введенного символа
#define SCROLL_CUR_RIGHT     0b00000110 // обычное направление
#define SCROLL_CUR_LEFT      0b00000100 // арабское направление      

// команды перемещения курсора и экрана влево/вправо
#define CUR_LEFT             0b00010000
#define CUR_RIGHT            0b00010100
#define DISP_LEFT            0b00011000
#define DISP_RIGHT           0b00011100

// инициализация жки на работу в 4-битном режиме
// с 2-мя строками и матрицей символов 5х7
#define IOM_4bits_2str_5x7          0b00101000

//************************************************************************
//**                                                                    **
//**  Описание пользовательских символов                                **
//**                                                                    **
//************************************************************************

//flash char s1[8]={0x00, 0x00, 0x1f, 0x11, 0x11, 0x11, 0x11, 0x00}; //"п"
//flash char s2[8]={0x00, 0x00, 0x11, 0x13, 0x15, 0x19, 0x11, 0x00}; //"и"
//flash char s3[8]={0x0c, 0x12, 0x12, 0x1e, 0x11, 0x11, 0x0e, 0x00}; //"в"
//flash char s4[8]={0x00, 0x00, 0x1f, 0x04, 0x04, 0x04, 0x04, 0x00}; //"т"
//flash char s5[8]={0x00, 0x00, 0x11, 0x1b, 0x15, 0x11, 0x11, 0x00}; //"м"

//************************************************************************
//**                                                                    **
//**   Прототипы функций                                                **
//**                                                                    **
//************************************************************************

/* установка лог. "1" на линии E */
#define LCD_E_SET    PORTC|=0x02
/* установка лог. "0" на линии E */
#define LCD_E_CLR    PORTC&=0xFD   
/* установка лог. "1" на линии RS */
#define LCD_RS_SET   PORTC|=0x01   
/* установка лог. "0" на линии RS */
#define LCD_RS_CLR   PORTC&=0xFE   

/* макрос, указывающий функции, что
передаются команды */
#define LCD_COMMAND  0             
/* макрос, указывающий функции, что
передаются данные */
#define LCD_DATA     1             



extern void lcd_putbyte(char c, char rs);
/* функция инициализации работы жки
в 4-битном режиме, без курсора */
extern void lcd_init();
/* функция очистки дисплея и возврата
курсора в начальную позицию*/
extern void lcd_clear();
/* функция перемещения курсора в заданную позицию
col - номер знакоместа по горизонтальной оси (от 0 до 15)
row - номер строки (0 или 1) */
extern void lcd_gotoxy(char col, char row);
extern void lcd_puts(char* s);




#endif /* LCD_H_ */